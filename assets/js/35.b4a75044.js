(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{348:function(t,e,l){"use strict";l.r(e);var i=l(7),a=Object(i.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"开发常用注解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#开发常用注解"}},[t._v("#")]),t._v(" 开发常用注解")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("@RequestParam(value=”参名”,required=”true/false”,defaultValue=””)")]),t._v(" "),e("p",[t._v("接收/path/?name=xx&sex=man，也就是查询字符串")])]),t._v(" "),e("li",[e("p",[t._v("@PathVariable接收请求url中的路径值")])]),t._v(" "),e("li",[e("p",[t._v("@RequiredArgsConstructor 生成带有必需参数的构造函数")])]),t._v(" "),e("li",[e("p",[t._v("@NotEmpty :不能为null，且Size>0")])]),t._v(" "),e("li",[e("p",[t._v("@NotNull:不能为null，但可以为empty,没有Size的约束")])]),t._v(" "),e("li",[e("p",[t._v("@NotBlank:只用于String,不能为null且trim()之后size>0")])]),t._v(" "),e("li",[e("p",[t._v('@JsonFormat(pattern="yyyy-MM-dd",timezone = "GMT+8")')])]),t._v(" "),e("li",[e("p",[t._v('@DateTimeFormat(pattern = "yyyy-MM-dd")  要是前后到后台的时间格式的转换')])]),t._v(" "),e("li",[e("p",[t._v('@TableLogic(value="原值",delval="改值")   在字段上加上这个注解再执行BaseMapper的删除方法时，删除方法会变成修改')])]),t._v(" "),e("li",[e("p",[t._v("@Configuration 定义配置类，被注解的类内部包含有一个或多个被@Bean注解的方法，这些方法将会被AnnotationConfigApplicationContext或AnnotationConfigWebApplicationContext类进行扫描，并用于构建bean定义，初始化Spring容器。")])]),t._v(" "),e("li",[e("p",[t._v("@DependsOn  作用：\n用于指定某个类的创建依赖的bean对象先创建。spring中没有特定bean的加载顺序，使用此注解则可指定bean的加载顺序。(在基于注解配置中，是按照类中方法的书写顺序决定的)\n属性：\nvalue：\n用于指定bean的唯一标识。被指定的bean会在当前bean创建之前加载。\n使用场景：\n在观察者模式中，分为事件，事件源和监听器。一般情况下，我们的监听器负责监听事件源，当事件源触发了事件之后，监听器就要捕获，并且做出相应的处理。以此为前提，我们肯定希望监听器的创建时间在事件源之前，此时就可以使用此注解。")])]),t._v(" "),e("li",[e("p",[t._v("@ControllerAdvice")]),t._v(" "),e("ul",[e("li",[t._v("全局异常处理\n全局数据绑定\n全局数据预处理")])])]),t._v(" "),e("li",[e("p",[t._v("@ExceptionHandler")]),t._v(" "),e("ul",[e("li",[t._v("@ExceptionHandler(value = MyException.class)")])])]),t._v(" "),e("li",[e("p",[t._v("@EnableAsync开始对异步任务的支持，并在相应的方法中使用@Async注解来声明一个异步任务。")])]),t._v(" "),e("li",[e("p",[t._v("后端主要使用的是Hibernate Validator检验框架，通过数据校验，我们能避免用户借助一些HTTP请求工具直接向后端发送一些不合法的数据请求")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("如果你是SpringBoot项目，依赖不需要导入，因为spring-boot-starter-web包里面有hibernate-validator包，不需要引用hibernate validator依赖。")])]),t._v(" "),e("li",[e("p",[t._v("使用说明文档")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://cloud.tencent.com/developer/article/1546262",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://cloud.tencent.com/developer/article/1546262"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://segmentfault.com/a/1190000023451809",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://segmentfault.com/a/1190000023451809"),e("OutboundLink")],1),t._v(" "),e("ul",[e("li",[e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("注解")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("用途")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Valid")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("递归的对关联的对象进行校验")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("AssertFalse")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("用于boolean字段，该字段的值只能为false")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("AssertTrue")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("用于boolean字段，该字段只能为true")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("DecimalMax(value)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("被注释的元素必须是一个数字，只能大于或等于该值")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("DecimalMin(value)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("被注释的元素必须是一个数字，只能小于或等于该值")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Digits(integer,fraction)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("检查是否是一种数字的(整数,小数)的位数")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Future")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("检查该字段的日期是否是属于将来的日期")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("FutureOrPresent")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("判断日期是否是将来或现在日期")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Past")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("检查该字段的日期是在过去")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("PastOrPresent")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("判断日期是否是过去或现在日期")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Max(value)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("该字段的值只能小于或等于该值")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Min(value)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("该字段的值只能大于或等于该值")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Negative")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("判断负数")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("NegativeOrZero")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("判断负数或0")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Positive")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("判断正数")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("PositiveOrZero")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("判断正数或0")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("NotNull")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("不能为null")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Null")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("必须为 null")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Pattern(value)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("被注释的元素必须符合指定的正则表达式")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Size(max, min)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("检查该字段的size是否在min和max之间，可以是字符串、数组、集合、Map等")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Length(max, min)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("判断字符串长度")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("CreditCardNumber")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("被注释的字符串必须通过Luhn校验算法，银行卡，信用卡等号码一般都用Luhn计算合法性")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Email")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("被注释的元素必须是电子邮箱地址")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Length(min=, max=)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("被注释的字符串的大小必须在指定的范围内")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("NotBlank")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("只能用于字符串不为null，并且字符串trim()以后length要大于0")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("NotEmpty")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("集合对象的元素不为0，即集合不为空，也可以用于字符串不为null")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Range(min=, max=)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("被注释的元素必须在合适的范围内")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("SafeHtml")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("classpath中要有jsoup包")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("ScriptAssert")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v('要有Java Scripting API 即JSR 223("Scripting for the JavaTMPlatform")的实现')])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("URL(protocol=,host=,port=,regexp=,flags=)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("被注释的字符串必须是一个有效的url")])])])])])])])])])])]),t._v(" "),e("li",[e("p",[t._v("@MapperScan")])]),t._v(" "),e("li",[e("p",[t._v("@Bean")]),t._v(" "),e("ul",[e("li",[t._v("@Bean就放在方法上，就是让方法去产生一个Bean，然后交给Spring容器，剩下的你就别管了。")])])]),t._v(" "),e("li",[e("p",[t._v("@Import")])]),t._v(" "),e("li",[e("p",[t._v("@Configuration")])]),t._v(" "),e("li",[e("p",[t._v("@Data  ：注解在类上；提供类所有属性的 getting 和 setting 方法，此外还提供了equals、canEqual、hashCode、toString 方法")])]),t._v(" "),e("li",[e("p",[t._v("@Setter：注解在属性上；为属性提供 setting 方法")])]),t._v(" "),e("li",[e("p",[t._v("@Getter：注解在属性上；为属性提供 getting 方法")])]),t._v(" "),e("li",[e("p",[t._v("@Log4j ：注解在类上；为类提供一个 属性名为log 的 log4j 日志对象")])]),t._v(" "),e("li",[e("p",[t._v("@NoArgsConstructor：注解在类上；为类提供一个无参的构造方法")])]),t._v(" "),e("li",[e("p",[t._v("@AllArgsConstructor：注解在类上；为类提供一个全参的构造方法")])]),t._v(" "),e("li",[e("p",[t._v("@NonNull : 注解在参数上, 如果该类参数为 null , 就会报出异常, throw new NullPointException(参数名)")])]),t._v(" "),e("li",[e("p",[t._v("@Cleanup : 注释在引用变量前, 自动回收资源 默认调用 close() 方法")])]),t._v(" "),e("li",[e("p",[t._v("@Getter/@Setter : 注解在类上, 为类提供读写属性")])]),t._v(" "),e("li",[e("p",[t._v("@Getter(lazy=true) :")])]),t._v(" "),e("li",[e("p",[t._v("@ToString : 注解在类上, 为类提供 toString() 方法")])]),t._v(" "),e("li",[e("p",[t._v("@EqualsAndHashCode : 注解在类上, 为类提供 equals() 和 hashCode() 方法")])]),t._v(" "),e("li",[e("p",[t._v("@NoArgsConstructor, @RequiredArgsConstructor, @AllArgsConstructor : 注解在类上, 为类提供无参,有指定必须参数, 全参构造函数")])]),t._v(" "),e("li",[e("p",[t._v("@Log4j : 注解在类上, 为类提供一个属性名为 log 的 log4j 的日志对象")])]),t._v(" "),e("li",[e("p",[t._v("@Slf4j : 注解在类上, 为类提供一个属性名为 log 的 log4j 的日志对象")])]),t._v(" "),e("li",[e("p",[t._v("@EnableDiscoveryClient")])]),t._v(" "),e("li",[e("p",[t._v("@EnableConfigurationProperties注解的作用是：使使用 @ConfigurationProperties 注解的类生效。")]),t._v(" "),e("ul",[e("li",[t._v("当@EnableConfigurationProperties注解应用到你的@Configuration时， 任何被@ConfigurationProperties注解的beans将自动被Environment属性配置。 这种风格的配置特别适合与SpringApplication的外部YAML配置进行配合使用。")])])]),t._v(" "),e("li",[e("p",[t._v("@Autowired")]),t._v(" "),e("ul",[e("li",[t._v("如果某个接口的实现类就是有多个该怎么办？此时可以使用@Qualifier注解")]),t._v(" "),e("li",[t._v("注意@Qualifier注解括号里面的应当是接口实现类的类名，")])])]),t._v(" "),e("li",[e("p",[t._v("@Resource")]),t._v(" "),e("p",[t._v("1、@Resource后面没有任何内容，默认通过name属性去匹配bean，找不到再按type去匹配")]),t._v(" "),e("p",[t._v("2、指定了name或者type则根据指定的类型去匹配bean")]),t._v(" "),e("p",[t._v("3、指定了name和type则根据指定的name和type去匹配bean，任何一个不匹配都将报错")])]),t._v(" "),e("li",[e("p",[t._v("@scope注解")]),t._v(" "),e("ul",[e("li",[t._v("在 Spring IoC 容器是指其创建的 Bean 对象相对于其他 Bean 对象的请求可见范围。")]),t._v(" "),e("li",[t._v("singleton：单例模式，在整个Spring IoC容器中，使用singleton定义的Bean将只有一个实例")]),t._v(" "),e("li",[t._v("prototype：原型模式，每次通过容器的getBean方法获取prototype定义的Bean时，都将产生一个新的Bean实例")]),t._v(" "),e("li",[t._v("request：对于每次HTTP请求，使用request定义的Bean都将产生一个新实例，即每次HTTP请求将会产生不同的Bean实例。只有在Web应用中使用Spring时，该作用域才有效")]),t._v(" "),e("li",[t._v("session：对于每次HTTP Session，使用session定义的Bean都将产生一个新实例。同样只有在Web应用中使用Spring时，该作用域才有效")]),t._v(" "),e("li",[t._v("globalsession：每个全局的HTTP Session，使用session定义的Bean都将产生一个新实例。典型情况下，仅在使用portlet context的时候有效。同样只有在Web应用中使用Spring时，该作用域才有效。")])])]),t._v(" "),e("li",[e("p",[t._v("@RequestBody")]),t._v(" "),e("ul",[e("li",[t._v("@RequestBody主要用来接收前端传递给后端的json字符串中的数据的(请求体中的数据的)")]),t._v(" "),e("li")])]),t._v(" "),e("li",[e("p",[t._v("@RequestParam")])]),t._v(" "),e("li",[e("p",[t._v("@JsonAlias注解，实现:json转模型时，使json中的特定key能转化为特定的模型属性;但是模型转json时，对应的转换后的key仍然与属性名一致")])]),t._v(" "),e("li",[e("p",[t._v("@JsonProperty注解，实现：json转模型时，使json中的特定key能转化为指定的模型属性；同样的，模型转json时，对应的转换后的key为指定的key")])]),t._v(" "),e("li",[e("p",[t._v("处理 request uri 部分的注解，路径参数变量：@PathVariable；")])]),t._v(" "),e("li",[e("p",[t._v("处理request header部分的注解：  @RequestHeader, @CookieValue，@RequestParam；")])]),t._v(" "),e("li",[e("p",[t._v("处理request body部分的注解：@RequestParam， @RequestBody；")])]),t._v(" "),e("li",[e("p",[t._v("@CookieValue 用来获取Cookie中的值")]),t._v(" "),e("ul",[e("li",[t._v("value：参数名称")]),t._v(" "),e("li",[t._v("required：是否必须")]),t._v(" "),e("li",[t._v("defaultValue：默认值")])])]),t._v(" "),e("li",[e("p",[t._v("@SessionAttributes")])]),t._v(" "),e("li",[e("p",[t._v("@ModelAttribute")])]),t._v(" "),e("li",[e("p",[t._v("@RequestHeader注解，可以把Request请求header部分的值绑定到方法的参数上。")])])]),t._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),e("p",[t._v("来源不知道了，如有侵犯，联系我删除")])])])}),[],!1,null,null,null);e.default=a.exports}}]);